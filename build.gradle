plugins {
    id "java"
    id "base"
    id "jacoco"
    id "maven-publish"
    id "io.fairyproject" version "1.3.0b2"
}

group = "dev.imanity.brew"
version = "0.3b3-SNAPSHOT"

repositories {
    mavenCentral()
    maven { url = "https://papermc.io/repo/repository/maven-public/" }
}

fairy {
    version("0.6.2b1-SNAPSHOT")
    mainPackage = "dev.imanity.brew"
    platform("bukkit")
    doTests()

    module("timer")
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.24"
    implementation "com.github.stateless4j:stateless4j:2.6.0"
    
    annotationProcessor "org.projectlombok:lombok:1.18.24"
    compileOnly "org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT"
    testImplementation "org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT"
    testImplementation "org.imanity.spigot:1.16.5:1.16.5"
    testImplementation "dev.imanity.mockbukkit:MockBukkit1.16:1.0.19"
    testImplementation "org.apache.commons:commons-lang3:3.12.0"
    compileOnly "org.jetbrains:annotations:23.0.0"
    compileOnly "com.github.ben-manes.caffeine:caffeine:2.9.2"
}

test {
    useJUnitPlatform()
}

publish.dependsOn build

sourceCompatibility = targetCompatibility = "1.8"
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

if (findProperty("deploy.imanityLibraries") == "true") {
    tasks.jar.configure {
        classifier = "sources"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) { publication ->
                from components.java
                pom {
                    name = "Brew " + project.name
                    description = "Brew API"
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username findProperty("imanityLibrariesUsername")
                    password findProperty("imanityLibrariesPassword")
                }
                url "https://maven.imanity.dev/repository/imanity-libraries/"
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}