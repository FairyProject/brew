package dev.imanity.brew.util.countdown;

import io.fairyproject.util.ConditionUtils;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

public class CountdownImpl implements Countdown {

    private long startMillis;
    private long durationMillis;
    private long currentCount;
    private TimeUnit timeUnit;
    private Consumer<Long> consumer;
    private final List<Long> numbersToCount;

    public CountdownImpl() {
        this.numbersToCount = new ArrayList<>();
    }

    public CountdownImpl duration(long millis) {
        this.durationMillis = millis;
        return this;
    }

    public CountdownImpl duration(long duration, @NotNull TimeUnit unit) {
        this.durationMillis = unit.toMillis(duration);
        return this;
    }

    public CountdownImpl timeUnit(@NotNull TimeUnit timeUnit) {
        this.timeUnit = timeUnit;
        return this;
    }

    public CountdownImpl numbersToCount(long... numbers) {
        for (long number : numbers) {
            this.numbersToCount.add(number);
        }
        return this;
    }

    @Override
    public Countdown consumer(@NotNull Consumer<Long> consumer) {
        this.consumer = consumer;
        return this;
    }

    @Override
    public boolean isStarted() {
        return this.startMillis != 0;
    }

    @Override
    public boolean isEnded() {
        return System.currentTimeMillis() - this.startMillis >= this.durationMillis;
    }

    public void start() {
        this.startMillis = System.currentTimeMillis();
    }

    public void start(long millis) {
        this.startMillis = millis;
    }

    @Override
    public void tick() {
        ConditionUtils.notNull(this.consumer, "Consumer is not set");
        ConditionUtils.notNull(this.timeUnit, "TimeUnit is not set");
        ConditionUtils.is(this.durationMillis > 0, "Duration is not set");

        // if the start time is not set, set it to now
        if (this.startMillis == 0) {
            this.start();
        }

        // Everything below this code within tick() is completely generated by github copilot I'm not joking.
        long currentMillis = System.currentTimeMillis();
        long elapsedMillis = currentMillis - this.startMillis;

        if (elapsedMillis >= this.durationMillis) {
            return;
        }

        long count = this.timeUnit.convert(this.durationMillis - elapsedMillis, TimeUnit.MILLISECONDS);
        System.out.println(elapsedMillis + " " + count);

        // if numbers to count is not set, just call the consumer
        if (this.numbersToCount.isEmpty()) {
            if (count != this.currentCount) {
                this.currentCount = count;
                this.onTick(count);
            }
        } else {
            // if numbers to count is set, only call the consumer if the count is in the list
            if (this.numbersToCount.contains(count) && count != this.currentCount) {
                this.currentCount = count;
                this.onTick(count);
            }
        }
    }

    @Override
    public void reset() {
        this.startMillis = -1;
    }

    private void onTick(long count) {
        this.consumer.accept(count);
    }

}
